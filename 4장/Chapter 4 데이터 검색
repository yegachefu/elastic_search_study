https://www.notion.so/Chapter-4-bcd621475dc642f4b67727b65c8fcaaa

# Chapter 4. 데이터 검색

---

## 01. 검색 API

---

- 검색 질의 표현 방식
- URI 검색
    - HTTP GET 요청을 활용하는 방식
    - 파라미터를 'Key=Value' 형태로 전달
    - q 옵션은 '[필드명]:검색어' 형태로 입력
    - 예시

        ```java
        GET movie_search/_search?q=prdtYear:2018
        ```

- Request Body 검색
    - HTTP 요청 시 Body에 검색할 컬럼과 검색어를 json 형태로 표현해서 전달하는 방식
    - json 형태 표현을 효율적으로 하기 위해 ES에서는 Query DSL이라는 문법을 제공
    - Query DSL을 사용해 json 구조로 표현할 수 있어 가독성이 좋음
    - 예시

        ```java
        POST movie_search/_search
        {

        	"query" : {

        		"term" : { "prdtYear": "2018" }

        	}

        }
        ```

## 02. Query DSL 이해하기

---

- Query DSL 쿼리 구조

    → 요청 json

    ```java
    {
    	// 리턴받는 결과의 개수 지정. default = 10
    	"size" :

    	// 몇 번째 문서부터 가져올지 지정. default = 0
    	"from" :

    	// 검색요청 timeout. default = unlimit
    	"timeout" :

    	// 검색 시 필요한 필드만 출력하고 싶을 때 사용
    	"_source" : {}

    	// 검색 조건문이 들어가는 공간
    	"query" : {}

    	// 통계 및 집계 데이터를 사용할 때 
    	"aggs" : {}

    	// 문서 결과를 어떻게 출력할지에 대한 조건을 사용하는 공간
    	"sort" : {}
    }
    ```

    → 응답 json

    ```java
    {
    	// 쿼리 실행한 시간
    	"took":

    	// 쿼리 시간이 초과할 경우 나타냄
    	"timed_out":

    	"_shards": {
    		// 쿼리 요청한 전체 샤드 개수
    		"total":
    		// 겁색 요청에 성공적으로 응답한 샤드 개수
    		"successful":
    		// 검색 요청에 실패한 샤드 개수
    		"failed":
    	},

    	"hits": {
    		// 검색 매칭된 문서의 전체 개수
    		"total":
    		// 일치하는 문서의 스코어 값 중 가장 높은 값
    		"max_score":
    		// 각 문서 정보와 스코어 값
    		"hits": []
    	}
    }
    ```

- Query DSL 쿼리와 필터

    [쿼리 컨텍스트와 필터 컨텍스트 차이점](https://www.notion.so/2ee4f99ffb6b44529c2b66629299bd0e)

- Query DSL의 주요 파라미터

    Multi Index 검색 - 복수의 인덱스를 , 로 묶어 검색할 수 있다.

    ```java
    POST movie_search,movie_auto/_search
    {
    	"query" : {
    		"term": {
    			"repGenreNm": "다큐멘터리"
    		}
    	}
    }
    ```

    쿼리 결과 페이징 - 아래와 같이 사용하지만 설정된 페이지를 제공하기 위해서 전체를 읽어서 사이즈만큼 필터링 하는 구조이기 때문에 사용에 유의해야함

    ```java
    첫번째 페이지 요청
    POST movie_search/_search
    {
    	"from":0,
    	"size":5,
    	"query" : {
    		"term": {
    		"repNationNm": "한국"
    		}
    	}
    }

    두번째 페이지 요청
    POST movie_search/_search
    {
    	"from":5,
    	"size":5,
    	"query" : {
    		"term": {
    		"repNationNm": "한국"
    		}
    	}
    }
    ```

    쿼리 결과 정렬 - sort 파라미터를 이용한다.

    ```java
    {
    	"sort" : {
    		"prdtYear": {
    			"order": "asc"
    		}
    	}
    }
    ```

    _source 필드 필터링 - 쿼리 시 아래와 같은 형태로 필터링 할 필드를 정할 수 있다.

    ```java
    {
    	"_source" : {
    		"movieNm"
    }
    ```

    범위 검색

    [범위 연산자](https://www.notion.so/d099603e70d84450a31ffdc7886a3eb4)

    operator 설정 - and, or 연산자를 명시적으로 지정가능

    ```java
    "operator": "and"
    ```

    minimum_should_match 설정 - 텀의 수가 N 개 이상인 경우 매칭되도록 한다.

    ```java
    {
    	"movieNm" : {
    		"query": "자전차왕 엄복동",
    		"minimum_should_match": {N}
    	}
    }
    ```

    fuzziness 설정 - 유사한 값을 찾는 Fuzzy Query 로 변경

    ```java
    // 오차범위 한글자 이하인 검색 결과까지 포함
    {
    	"movieNm" : {
    		"query": "Fli high",
    		"fuzziness": 1
    	}
    }
    ```

    boost 설정 - 가중치 주입

    ```java
    // movieNm에 가중치를 3만큼 곱한다.
    {
    	"multi_match" : {
    		"query": "Fly",
    		"fields": ["movieNm^3", "movieNmEn"]
    	}
    }
    ```

## 03. Query DSL의 주요쿼리

---

- Match All Query - 모든 문서를 검색하는 쿼리

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"match_all": {}
    	}
    }
    ```

- Match Query - 문장을 형태소 분석을 통해 텀으로 분리한 후 텀을 이용해 검색 질의를 수행함

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"match": {
    			"movieNm": "그대 장미"
    		}
    	}
    }
    ```

- Multi Match Query - 단일 필드가 아닌 여러개의 필드를 대상으로 검색 할 때 사용

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"multi_match": {
    			"query": "가족",
    			"fields": ["movieNm", "movieNmEn"]
    		}
    	}
    }
    ```

- Term Query - Keyword 데이터 타입을 대상으로 쿼리

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"term": {
    			"genreAlt": "코미디",
    		}
    	}
    }
    ```

- Bool Query - 하나 or 여러개의 쿼리를 조합해 더 높은 스코어를 가진 쿼리 조건으로 검색을 수행하게 함

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"bool": {
    			// AND 
    			"must" : [],
    			// NOT
    			"must_not": [],
    			// OR
    			"should": [],
    			// IN ()
    			"filter": []
    		}
    	}
    }
    ```

- Query String - 쿼리 분석기를 이용하는 질의 작성 가능

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"query_string": {
    			"default_field": "movieNm",
    			// 공백은 연산자로 사용되지 않음 '어린이 날' 로 검색됨
    			"query": "(가정) AND (어린이 날)"
    		}
    	}
    }
    ```

- Prefix Query - 해당 접두어가 있는 문서를 검색

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"prefix": {
    			// '자전차'로 시작하는 문서를 검색한다
    			"movieNm": "자전차",
    		}
    	}
    }
    ```

- Exists Query - 필드 값이 null 이 아닌 문서를 검색

    ```java
    POST movie_search/_search
    {
    	"query" : {
    		"exists": {
    			// movieNm 필드가 null이 아닌 문서를 검색
    			"field": "movieNm",
    		}
    	}
    }
    ```

- Nested Query - SQL 조인과 유사한 기능. Nested 데이터 타입의 필드를 검색할 때 사용. 문서 내부에 다른 문서가 존재할 경우 사용

    ```java
    {
    	// Nested Query를 이용해 문서의 companies 필드 안에 companyCd 코드를 매칭해 조회한다.
    	"nested" : {
    		"path": "companies", 
    		"query": {
    			"bool": {
    				"must": [
    					{
    						"term": {
    							"companies.companyCd": "20173401"
    						}
    					}
    				}
    			}
    		}
    	}
    }
    ```

## 04. 부가적인 검색 API

---

- 효율적인 검색을 위한 환경설정

    동적 분배 방식의 샤드 선택 - 검색 요청의 응답시간, 검색 요청을 수행하는 쓰레드풀의 크기 등을 고려해 최적의 샤드를 동적으로 결정하는 방식

    ```java
    PUT _cluster/settings
    {
    	"transient" : {
    		"cluster.routing.use_adaptive_replica_selection": true
    	}
    }
    ```

    글로벌 타임아웃 설정 - 모든 검색 쿼리에 동일하게 타임아웃 정책을 적용

    ```java
    PUT _cluster/settings
    {
    	"transient" : {
    		"search.default_search_timeout": "1s"
    	}
    }
    ```

- Search Shards API - 검색이 수행되는 노드 및 샤드에 대한 정보를 확인

    ```java
    POST movie_search/_search_shards
    ```

- Multi Search API - 여러 건의 검색 요청을 통합해서 한번에 요청하고 결과를 종합해서 받음

    ```java
    POST _msearch
    {"index" : "movie_auto"}
    {"query" : {"match_all" : {}}, "from" : 0, "size" : 10}
    {"index" : "movie_search"}
    {"query" : {"match_all" : {}}, "from" : 0, "size" : 10}
    ```

- Count API - 문서의 개수를 확인

    ```java
    // URI 검색
    POST movie_search/_count?q=prdtYear:2017
    ```

    ```java
    // Request Body 검색
    POST movie_search/_count
    { 
    	"query": {
    		"query_string": {
    			"default_field": "prdtYear",
    			"query": "2017"
    		}
    	}
    }
    ```

- Validate API - 쿼리가 유효하게 작성됐는지 검증

    ```java
    // URI 검색
    POST movie_search/_validate/query?q=prdtYear:2017
    ```

    ```java
    // Request Body 검색
    POST movie_search/_validate/query
    { 
    	"query": {
    		"match": {
    			"prdtYear": 2017
    		}
    	}
    }
    ```

    ```java
    // Request Body 검색 + rewrite 추가
    // rewrite를 true로 하면 valid=false 인 경우 Exception 정보를 함께 리턴한다.
    POST movie_search/_validate/query?rewrite=true
    { 
    	"query": {
    		"match": {
    			"prdtYear": 2017
    		}
    	}
    }
    ```

- Explain API - 특정 문서에 대해 요청한 쿼리가 어떻게 스코어가 계산되는지 자세히 확인 가능

    ```java
    POST movie_search/_doc/8/_explain
    { 
    	"query": {
    		"term": {
    			"prdtYear": 2017
    		}
    	}
    }
    ```

- Profile API - 쿼리에 대한 수행 계획, 수행시간을 리턴한다. 튜닝 및 디버깅 용도로 사용 가능

    ```java
    POST movie_search/_search
    {
    	"profile": true,
    	"query": {
    		"match_all": {}
    	}
    }
    ```
